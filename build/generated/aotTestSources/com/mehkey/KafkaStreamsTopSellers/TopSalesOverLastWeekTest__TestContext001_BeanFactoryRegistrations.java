package com.mehkey.KafkaStreamsTopSellers;

import java.lang.Class;
import java.lang.String;
import org.springframework.aop.framework.autoproxy.InfrastructureAdvisorAutoProxyCreator__TestContext001_BeanDefinitions;
import org.springframework.beans.factory.aot.BeanInstanceSupplier;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.beans.factory.support.RootBeanDefinition;
import org.springframework.boot.autoconfigure.AutoConfigurationPackages__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.aop.AopAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.codec.CodecProperties__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.context.LifecycleProperties__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.info.ProjectInfoProperties__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.integration.IntegrationProperties__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.jackson.JacksonProperties__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.jmx.JmxProperties__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.kafka.KafkaAnnotationDrivenConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.kafka.KafkaProperties__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.netty.NettyAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.netty.NettyProperties__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskExecutionProperties__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskSchedulingProperties__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.thymeleaf.TemplateEngineConfigurations__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.transaction.TransactionProperties__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.web.ServerProperties__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.web.WebProperties__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.MultipartProperties__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.boot.context.properties.BoundConfigurationProperties__TestContext001_BeanDefinitions;
import org.springframework.boot.context.properties.ConfigurationPropertiesBinder__TestContext001_BeanDefinitions;
import org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor__TestContext001_BeanDefinitions;
import org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer__TestContext001_BeanDefinitions;
import org.springframework.boot.test.mock.mockito.MockitoPostProcessor__TestContext001_BeanDefinitions;
import org.springframework.boot.validation.beanvalidation.MethodValidationExcludeFilter__TestContext001_BeanDefinitions;
import org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor__TestContext001_BeanDefinitions;
import org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor__TestContext001_BeanDefinitions;
import org.springframework.cloud.function.cloudevent.CloudEventsFunctionExtensionConfiguration__TestContext001_BeanDefinitions;
import org.springframework.cloud.function.context.FunctionProperties__TestContext001_BeanDefinitions;
import org.springframework.cloud.function.context.config.ContextFunctionCatalogAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.cloud.function.context.config.KotlinLambdaToFunctionAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.cloud.stream.binder.kafka.config.ExtendedBindingHandlerMappingsProviderConfiguration__TestContext001_BeanDefinitions;
import org.springframework.cloud.stream.binder.kafka.streams.ExtendedBindingHandlerMappingsProviderAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.cloud.stream.binder.kafka.streams.KafkaStreamsBinderSupportAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.cloud.stream.binder.kafka.streams.function.KafkaStreamsFunctionAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.cloud.stream.binder.kafka.streams.properties.KafkaStreamsExtendedBindingProperties__TestContext001_BeanDefinitions;
import org.springframework.cloud.stream.config.BinderFactoryAutoConfiguration__TestContext001_BeanDefinitions;
import org.springframework.cloud.stream.config.BindingServiceConfiguration__TestContext001_BeanDefinitions;
import org.springframework.cloud.stream.config.BindingServiceProperties__TestContext001_BeanDefinitions;
import org.springframework.cloud.stream.config.ContentTypeConfiguration__TestContext001_BeanDefinitions;
import org.springframework.cloud.stream.config.SpelExpressionConverterConfiguration__TestContext001_BeanDefinitions;
import org.springframework.cloud.stream.config.SpringIntegrationProperties__TestContext001_BeanDefinitions;
import org.springframework.cloud.stream.function.FunctionConfiguration__TestContext001_BeanDefinitions;
import org.springframework.cloud.stream.function.StreamFunctionProperties__TestContext001_BeanDefinitions;
import org.springframework.context.event.DefaultEventListenerFactory__TestContext001_BeanDefinitions;
import org.springframework.context.event.EventListenerMethodProcessor__TestContext001_BeanDefinitions;
import org.springframework.expression.spel.support.SimpleEvaluationContext__TestContext001_BeanDefinitions;
import org.springframework.expression.spel.support.StandardEvaluationContext__TestContext001_BeanDefinitions;
import org.springframework.integration.channel.DefaultHeaderChannelRegistry__TestContext001_BeanDefinitions;
import org.springframework.integration.channel.MessagePublishingErrorHandler__TestContext001_BeanDefinitions;
import org.springframework.integration.channel.NullChannel__TestContext001_BeanDefinitions;
import org.springframework.integration.channel.PublishSubscribeChannel__TestContext001_BeanDefinitions;
import org.springframework.integration.config.ConverterRegistrar__TestContext001_BeanDefinitions;
import org.springframework.integration.config.CustomConversionServiceFactoryBean__TestContext001_BeanDefinitions;
import org.springframework.integration.config.GlobalChannelInterceptorProcessor__TestContext001_BeanDefinitions;
import org.springframework.integration.config.IdGeneratorConfigurer__TestContext001_BeanDefinitions;
import org.springframework.integration.config.IntegrationManagementConfiguration__TestContext001_BeanDefinitions;
import org.springframework.integration.config.MessagingAnnotationPostProcessor__TestContext001_BeanDefinitions;
import org.springframework.integration.config.SpelFunctionFactoryBean;
import org.springframework.integration.dsl.BaseIntegrationFlowDefinition__TestContext001_BeanDefinitions;
import org.springframework.integration.dsl.context.IntegrationFlowBeanPostProcessor__TestContext001_BeanDefinitions;
import org.springframework.integration.dsl.context.StandardIntegrationFlowContext__TestContext001_BeanDefinitions;
import org.springframework.integration.endpoint.AbstractEndpoint__TestContext001_BeanDefinitions;
import org.springframework.integration.handler.LoggingHandler__TestContext001_BeanDefinitions;
import org.springframework.integration.handler.support.IntegrationMessageHandlerMethodFactory__TestContext001_BeanDefinitions;
import org.springframework.integration.json.JsonPathUtils;
import org.springframework.integration.support.DefaultMessageBuilderFactory__TestContext001_BeanDefinitions;
import org.springframework.integration.support.SmartLifecycleRoleController__TestContext001_BeanDefinitions;
import org.springframework.integration.support.channel.BeanFactoryChannelResolver__TestContext001_BeanDefinitions;
import org.springframework.integration.support.converter.DefaultDatatypeChannelMessageConverter__TestContext001_BeanDefinitions;
import org.springframework.kafka.annotation.KafkaListenerAnnotationBeanPostProcessor__TestContext001_BeanDefinitions;
import org.springframework.kafka.config.KafkaListenerEndpointRegistry__TestContext001_BeanDefinitions;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport__TestContext001_BeanDefinitions;

/**
 * Register bean definitions for the bean factory.
 */
public class TopSalesOverLastWeekTest__TestContext001_BeanFactoryRegistrations {
  /**
   * Get the bean instance supplier for 'jsonPath'.
   */
  private static BeanInstanceSupplier<SpelFunctionFactoryBean> getJsonPathInstanceSupplier() {
    return BeanInstanceSupplier.<SpelFunctionFactoryBean>forConstructor(Class.class, String.class)
            .withGenerator((registeredBean, args) -> new SpelFunctionFactoryBean(args.get(0), args.get(1)));
  }

  /**
   * Get the bean definition for 'jsonPath'
   */
  private static BeanDefinition getJsonPathBeanDefinition() {
    Class<?> beanType = SpelFunctionFactoryBean.class;
    RootBeanDefinition beanDefinition = new RootBeanDefinition(beanType);
    beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0, JsonPathUtils.class);
    beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(1, "evaluate");
    beanDefinition.setInstanceSupplier(getJsonPathInstanceSupplier());
    return beanDefinition;
  }

  /**
   * Register the bean definitions.
   */
  public void registerBeanDefinitions(DefaultListableBeanFactory beanFactory) {
    beanFactory.registerBeanDefinition("org.springframework.boot.test.mock.mockito.MockitoPostProcessor$SpyPostProcessor", MockitoPostProcessor__TestContext001_BeanDefinitions.SpyPostProcessor__BeanDefinitions.getSpyPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.test.mock.mockito.MockitoPostProcessor", MockitoPostProcessor__TestContext001_BeanDefinitions.getMockitoPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.context.event.internalEventListenerProcessor", EventListenerMethodProcessor__TestContext001_BeanDefinitions.getInternalEventListenerProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.context.event.internalEventListenerFactory", DefaultEventListenerFactory__TestContext001_BeanDefinitions.getInternalEventListenerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaStreamsTopSellersApplication", KafkaStreamsTopSellersApplication__TestContext001_BeanDefinitions.getKafkaStreamsTopSellersApplicationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.AutoConfigurationPackages", AutoConfigurationPackages__TestContext001_BeanDefinitions.BasePackages__BeanDefinitions.getAutoConfigurationPackagesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration", PropertyPlaceholderAutoConfiguration__TestContext001_BeanDefinitions.getPropertyPlaceholderAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("propertySourcesPlaceholderConfigurer", PropertyPlaceholderAutoConfiguration__TestContext001_BeanDefinitions.getPropertySourcesPlaceholderConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration", WebSocketServletAutoConfiguration__TestContext001_BeanDefinitions.TomcatWebSocketConfiguration__BeanDefinitions.getTomcatWebSocketConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("websocketServletWebServerCustomizer", WebSocketServletAutoConfiguration__TestContext001_BeanDefinitions.TomcatWebSocketConfiguration__BeanDefinitions.getWebsocketServletWebServerCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration", WebSocketServletAutoConfiguration__TestContext001_BeanDefinitions.getWebSocketServletAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat", ServletWebServerFactoryConfiguration__TestContext001_BeanDefinitions.EmbeddedTomcat__BeanDefinitions.getEmbeddedTomcatBeanDefinition());
    beanFactory.registerBeanDefinition("tomcatServletWebServerFactory", ServletWebServerFactoryConfiguration__TestContext001_BeanDefinitions.EmbeddedTomcat__BeanDefinitions.getTomcatServletWebServerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration", ServletWebServerFactoryAutoConfiguration__TestContext001_BeanDefinitions.getServletWebServerFactoryAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("servletWebServerFactoryCustomizer", ServletWebServerFactoryAutoConfiguration__TestContext001_BeanDefinitions.getServletWebServerFactoryCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("tomcatServletWebServerFactoryCustomizer", ServletWebServerFactoryAutoConfiguration__TestContext001_BeanDefinitions.getTomcatServletWebServerFactoryCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor", ConfigurationPropertiesBindingPostProcessor__TestContext001_BeanDefinitions.getConfigurationPropertiesBindingPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.internalConfigurationPropertiesBinderFactory", ConfigurationPropertiesBinder__TestContext001_BeanDefinitions.Factory__BeanDefinitions.getInternalConfigurationPropertiesBinderFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.internalConfigurationPropertiesBinder", ConfigurationPropertiesBinder__TestContext001_BeanDefinitions.getInternalConfigurationPropertiesBinderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.properties.BoundConfigurationProperties", BoundConfigurationProperties__TestContext001_BeanDefinitions.getBoundConfigurationPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.properties.EnableConfigurationPropertiesRegistrar.methodValidationExcludeFilter", MethodValidationExcludeFilter__TestContext001_BeanDefinitions.getMethodValidationExcludeFilterBeanDefinition());
    beanFactory.registerBeanDefinition("server-org.springframework.boot.autoconfigure.web.ServerProperties", ServerProperties__TestContext001_BeanDefinitions.getServerPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("webServerFactoryCustomizerBeanPostProcessor", WebServerFactoryCustomizerBeanPostProcessor__TestContext001_BeanDefinitions.getWebServerFactoryCustomizerBeanPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("errorPageRegistrarBeanPostProcessor", ErrorPageRegistrarBeanPostProcessor__TestContext001_BeanDefinitions.getErrorPageRegistrarBeanPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration", DispatcherServletAutoConfiguration__TestContext001_BeanDefinitions.DispatcherServletConfiguration__BeanDefinitions.getDispatcherServletConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("dispatcherServlet", DispatcherServletAutoConfiguration__TestContext001_BeanDefinitions.DispatcherServletConfiguration__BeanDefinitions.getDispatcherServletBeanDefinition());
    beanFactory.registerBeanDefinition("spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties", WebMvcProperties__TestContext001_BeanDefinitions.getWebMvcPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration", DispatcherServletAutoConfiguration__TestContext001_BeanDefinitions.DispatcherServletRegistrationConfiguration__BeanDefinitions.getDispatcherServletRegistrationConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("dispatcherServletRegistration", DispatcherServletAutoConfiguration__TestContext001_BeanDefinitions.DispatcherServletRegistrationConfiguration__BeanDefinitions.getDispatcherServletRegistrationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration", DispatcherServletAutoConfiguration__TestContext001_BeanDefinitions.getDispatcherServletAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration", JacksonAutoConfiguration__TestContext001_BeanDefinitions.Jackson2ObjectMapperBuilderCustomizerConfiguration__BeanDefinitions.getJacksonObjectMapperBuilderCustomizerConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("standardJacksonObjectMapperBuilderCustomizer", JacksonAutoConfiguration__TestContext001_BeanDefinitions.Jackson2ObjectMapperBuilderCustomizerConfiguration__BeanDefinitions.getStandardJacksonObjectMapperBuilderCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties", JacksonProperties__TestContext001_BeanDefinitions.getJacksonPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration", JacksonAutoConfiguration__TestContext001_BeanDefinitions.JacksonObjectMapperBuilderConfiguration__BeanDefinitions.getJacksonObjectMapperBuilderConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jacksonObjectMapperBuilder", JacksonAutoConfiguration__TestContext001_BeanDefinitions.JacksonObjectMapperBuilderConfiguration__BeanDefinitions.getJacksonObjectMapperBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration", JacksonAutoConfiguration__TestContext001_BeanDefinitions.ParameterNamesModuleConfiguration__BeanDefinitions.getParameterNamesModuleConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("parameterNamesModule", JacksonAutoConfiguration__TestContext001_BeanDefinitions.ParameterNamesModuleConfiguration__BeanDefinitions.getParameterNamesModuleBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration", JacksonAutoConfiguration__TestContext001_BeanDefinitions.JacksonObjectMapperConfiguration__BeanDefinitions.getJacksonObjectMapperConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jacksonObjectMapper", JacksonAutoConfiguration__TestContext001_BeanDefinitions.JacksonObjectMapperConfiguration__BeanDefinitions.getJacksonObjectMapperBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonMixinConfiguration", JacksonAutoConfiguration__TestContext001_BeanDefinitions.JacksonMixinConfiguration__BeanDefinitions.getJacksonMixinConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jsonMixinModuleEntries", JacksonAutoConfiguration__TestContext001_BeanDefinitions.JacksonMixinConfiguration__BeanDefinitions.getJsonMixinModuleEntriesBeanDefinition());
    beanFactory.registerBeanDefinition("jsonMixinModule", JacksonAutoConfiguration__TestContext001_BeanDefinitions.JacksonMixinConfiguration__BeanDefinitions.getJsonMixinModuleBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration", JacksonAutoConfiguration__TestContext001_BeanDefinitions.getJacksonAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jsonComponentModule", JacksonAutoConfiguration__TestContext001_BeanDefinitions.getJsonComponentModuleBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$DefaultCodecsConfiguration", CodecsAutoConfiguration__TestContext001_BeanDefinitions.DefaultCodecsConfiguration__BeanDefinitions.getDefaultCodecsConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("defaultCodecCustomizer", CodecsAutoConfiguration__TestContext001_BeanDefinitions.DefaultCodecsConfiguration__BeanDefinitions.getDefaultCodecCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$JacksonCodecConfiguration", CodecsAutoConfiguration__TestContext001_BeanDefinitions.JacksonCodecConfiguration__BeanDefinitions.getJacksonCodecConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jacksonCodecCustomizer", CodecsAutoConfiguration__TestContext001_BeanDefinitions.JacksonCodecConfiguration__BeanDefinitions.getJacksonCodecCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration", CodecsAutoConfiguration__TestContext001_BeanDefinitions.getCodecsAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.codec-org.springframework.boot.autoconfigure.codec.CodecProperties", CodecProperties__TestContext001_BeanDefinitions.getCodecPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration", ValidationAutoConfiguration__TestContext001_BeanDefinitions.getValidationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("defaultValidator", ValidationAutoConfiguration__TestContext001_BeanDefinitions.getDefaultValidatorBeanDefinition());
    beanFactory.registerBeanDefinition("methodValidationPostProcessor", ValidationAutoConfiguration__TestContext001_BeanDefinitions.getMethodValidationPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration", TaskExecutionAutoConfiguration__TestContext001_BeanDefinitions.getTaskExecutionAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("taskExecutorBuilder", TaskExecutionAutoConfiguration__TestContext001_BeanDefinitions.getTaskExecutorBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("applicationTaskExecutor", TaskExecutionAutoConfiguration__TestContext001_BeanDefinitions.getApplicationTaskExecutorBeanDefinition());
    beanFactory.registerBeanDefinition("spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties", TaskExecutionProperties__TestContext001_BeanDefinitions.getTaskExecutionPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration", ErrorMvcAutoConfiguration__TestContext001_BeanDefinitions.WhitelabelErrorViewConfiguration__BeanDefinitions.getWhitelabelErrorViewConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("error", ErrorMvcAutoConfiguration__TestContext001_BeanDefinitions.WhitelabelErrorViewConfiguration__BeanDefinitions.getErrorBeanDefinition());
    beanFactory.registerBeanDefinition("beanNameViewResolver", ErrorMvcAutoConfiguration__TestContext001_BeanDefinitions.WhitelabelErrorViewConfiguration__BeanDefinitions.getBeanNameViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration", ErrorMvcAutoConfiguration__TestContext001_BeanDefinitions.DefaultErrorViewResolverConfiguration__BeanDefinitions.getDefaultErrorViewResolverConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("conventionErrorViewResolver", ErrorMvcAutoConfiguration__TestContext001_BeanDefinitions.DefaultErrorViewResolverConfiguration__BeanDefinitions.getConventionErrorViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("spring.web-org.springframework.boot.autoconfigure.web.WebProperties", WebProperties__TestContext001_BeanDefinitions.getWebPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration", ErrorMvcAutoConfiguration__TestContext001_BeanDefinitions.getErrorMvcAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("errorAttributes", ErrorMvcAutoConfiguration__TestContext001_BeanDefinitions.getErrorAttributesBeanDefinition());
    beanFactory.registerBeanDefinition("basicErrorController", ErrorMvcAutoConfiguration__TestContext001_BeanDefinitions.getBasicErrorControllerBeanDefinition());
    beanFactory.registerBeanDefinition("errorPageCustomizer", ErrorMvcAutoConfiguration__TestContext001_BeanDefinitions.getErrorPageCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("preserveErrorControllerTargetClassPostProcessor", ErrorMvcAutoConfiguration__TestContext001_BeanDefinitions.getPreserveErrorControllerTargetClassPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration", WebMvcAutoConfiguration__TestContext001_BeanDefinitions.EnableWebMvcConfiguration__BeanDefinitions.getEnableWebMvcConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("requestMappingHandlerAdapter", WebMvcAutoConfiguration__TestContext001_BeanDefinitions.EnableWebMvcConfiguration__BeanDefinitions.getRequestMappingHandlerAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("welcomePageHandlerMapping", WebMvcAutoConfiguration__TestContext001_BeanDefinitions.EnableWebMvcConfiguration__BeanDefinitions.getWelcomePageHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("localeResolver", WebMvcAutoConfiguration__TestContext001_BeanDefinitions.EnableWebMvcConfiguration__BeanDefinitions.getLocaleResolverBeanDefinition());
    beanFactory.registerBeanDefinition("themeResolver", WebMvcAutoConfiguration__TestContext001_BeanDefinitions.EnableWebMvcConfiguration__BeanDefinitions.getThemeResolverBeanDefinition());
    beanFactory.registerBeanDefinition("flashMapManager", WebMvcAutoConfiguration__TestContext001_BeanDefinitions.EnableWebMvcConfiguration__BeanDefinitions.getFlashMapManagerBeanDefinition());
    beanFactory.registerBeanDefinition("mvcConversionService", WebMvcAutoConfiguration__TestContext001_BeanDefinitions.EnableWebMvcConfiguration__BeanDefinitions.getMvcConversionServiceBeanDefinition());
    beanFactory.registerBeanDefinition("mvcValidator", WebMvcAutoConfiguration__TestContext001_BeanDefinitions.EnableWebMvcConfiguration__BeanDefinitions.getMvcValidatorBeanDefinition());
    beanFactory.registerBeanDefinition("mvcContentNegotiationManager", WebMvcAutoConfiguration__TestContext001_BeanDefinitions.EnableWebMvcConfiguration__BeanDefinitions.getMvcContentNegotiationManagerBeanDefinition());
    beanFactory.registerBeanDefinition("requestMappingHandlerMapping", WebMvcConfigurationSupport__TestContext001_BeanDefinitions.getRequestMappingHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("mvcPatternParser", WebMvcConfigurationSupport__TestContext001_BeanDefinitions.getMvcPatternParserBeanDefinition());
    beanFactory.registerBeanDefinition("mvcUrlPathHelper", WebMvcConfigurationSupport__TestContext001_BeanDefinitions.getMvcUrlPathHelperBeanDefinition());
    beanFactory.registerBeanDefinition("mvcPathMatcher", WebMvcConfigurationSupport__TestContext001_BeanDefinitions.getMvcPathMatcherBeanDefinition());
    beanFactory.registerBeanDefinition("viewControllerHandlerMapping", WebMvcConfigurationSupport__TestContext001_BeanDefinitions.getViewControllerHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("beanNameHandlerMapping", WebMvcConfigurationSupport__TestContext001_BeanDefinitions.getBeanNameHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("routerFunctionMapping", WebMvcConfigurationSupport__TestContext001_BeanDefinitions.getRouterFunctionMappingBeanDefinition());
    beanFactory.registerBeanDefinition("resourceHandlerMapping", WebMvcConfigurationSupport__TestContext001_BeanDefinitions.getResourceHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("mvcResourceUrlProvider", WebMvcConfigurationSupport__TestContext001_BeanDefinitions.getMvcResourceUrlProviderBeanDefinition());
    beanFactory.registerBeanDefinition("defaultServletHandlerMapping", WebMvcConfigurationSupport__TestContext001_BeanDefinitions.getDefaultServletHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("handlerFunctionAdapter", WebMvcConfigurationSupport__TestContext001_BeanDefinitions.getHandlerFunctionAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("mvcUriComponentsContributor", WebMvcConfigurationSupport__TestContext001_BeanDefinitions.getMvcUriComponentsContributorBeanDefinition());
    beanFactory.registerBeanDefinition("httpRequestHandlerAdapter", WebMvcConfigurationSupport__TestContext001_BeanDefinitions.getHttpRequestHandlerAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("simpleControllerHandlerAdapter", WebMvcConfigurationSupport__TestContext001_BeanDefinitions.getSimpleControllerHandlerAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("handlerExceptionResolver", WebMvcConfigurationSupport__TestContext001_BeanDefinitions.getHandlerExceptionResolverBeanDefinition());
    beanFactory.registerBeanDefinition("mvcViewResolver", WebMvcConfigurationSupport__TestContext001_BeanDefinitions.getMvcViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("mvcHandlerMappingIntrospector", WebMvcConfigurationSupport__TestContext001_BeanDefinitions.getMvcHandlerMappingIntrospectorBeanDefinition());
    beanFactory.registerBeanDefinition("viewNameTranslator", WebMvcConfigurationSupport__TestContext001_BeanDefinitions.getViewNameTranslatorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter", WebMvcAutoConfiguration__TestContext001_BeanDefinitions.WebMvcAutoConfigurationAdapter__BeanDefinitions.getWebMvcAutoConfigurationAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("defaultViewResolver", WebMvcAutoConfiguration__TestContext001_BeanDefinitions.WebMvcAutoConfigurationAdapter__BeanDefinitions.getDefaultViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("viewResolver", WebMvcAutoConfiguration__TestContext001_BeanDefinitions.WebMvcAutoConfigurationAdapter__BeanDefinitions.getViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("requestContextFilter", WebMvcAutoConfiguration__TestContext001_BeanDefinitions.WebMvcAutoConfigurationAdapter__BeanDefinitions.getRequestContextFilterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration", WebMvcAutoConfiguration__TestContext001_BeanDefinitions.getWebMvcAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("formContentFilter", WebMvcAutoConfiguration__TestContext001_BeanDefinitions.getFormContentFilterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$ClassProxyingConfiguration", AopAutoConfiguration__TestContext001_BeanDefinitions.ClassProxyingConfiguration__BeanDefinitions.getClassProxyingConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("forceAutoProxyCreatorToUseClassProxying", AopAutoConfiguration__TestContext001_BeanDefinitions.ClassProxyingConfiguration__BeanDefinitions.getForceAutoProxyCreatorToUseClassProxyingBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.aop.AopAutoConfiguration", AopAutoConfiguration__TestContext001_BeanDefinitions.getAopAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration", ApplicationAvailabilityAutoConfiguration__TestContext001_BeanDefinitions.getApplicationAvailabilityAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("applicationAvailability", ApplicationAvailabilityAutoConfiguration__TestContext001_BeanDefinitions.getApplicationAvailabilityBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration", ConfigurationPropertiesAutoConfiguration__TestContext001_BeanDefinitions.getConfigurationPropertiesAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration", LifecycleAutoConfiguration__TestContext001_BeanDefinitions.getLifecycleAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("lifecycleProcessor", LifecycleAutoConfiguration__TestContext001_BeanDefinitions.getLifecycleProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties", LifecycleProperties__TestContext001_BeanDefinitions.getLifecyclePropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration", PersistenceExceptionTranslationAutoConfiguration__TestContext001_BeanDefinitions.getPersistenceExceptionTranslationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("persistenceExceptionTranslationPostProcessor", PersistenceExceptionTranslationAutoConfiguration__TestContext001_BeanDefinitions.getPersistenceExceptionTranslationPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration", HttpMessageConvertersAutoConfiguration__TestContext001_BeanDefinitions.StringHttpMessageConverterConfiguration__BeanDefinitions.getStringHttpMessageConverterConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("stringHttpMessageConverter", HttpMessageConvertersAutoConfiguration__TestContext001_BeanDefinitions.StringHttpMessageConverterConfiguration__BeanDefinitions.getStringHttpMessageConverterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration", JacksonHttpMessageConvertersConfiguration__TestContext001_BeanDefinitions.MappingJackson2HttpMessageConverterConfiguration__BeanDefinitions.getMappingJacksonHttpMessageConverterConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("mappingJackson2HttpMessageConverter", JacksonHttpMessageConvertersConfiguration__TestContext001_BeanDefinitions.MappingJackson2HttpMessageConverterConfiguration__BeanDefinitions.getMappingJacksonHttpMessageConverterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration", JacksonHttpMessageConvertersConfiguration__TestContext001_BeanDefinitions.getJacksonHttpMessageConvertersConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration", HttpMessageConvertersAutoConfiguration__TestContext001_BeanDefinitions.getHttpMessageConvertersAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("messageConverters", HttpMessageConvertersAutoConfiguration__TestContext001_BeanDefinitions.getMessageConvertersBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration", ProjectInfoAutoConfiguration__TestContext001_BeanDefinitions.getProjectInfoAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties", ProjectInfoProperties__TestContext001_BeanDefinitions.getProjectInfoPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration", TaskSchedulingAutoConfiguration__TestContext001_BeanDefinitions.getTaskSchedulingAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("taskSchedulerBuilder", TaskSchedulingAutoConfiguration__TestContext001_BeanDefinitions.getTaskSchedulerBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties", TaskSchedulingProperties__TestContext001_BeanDefinitions.getTaskSchedulingPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationComponentScanConfiguration", IntegrationAutoConfiguration__TestContext001_BeanDefinitions.IntegrationComponentScanConfiguration__BeanDefinitions.getIntegrationComponentScanConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.integration.config.IntegrationManagementConfiguration", IntegrationManagementConfiguration__TestContext001_BeanDefinitions.getIntegrationManagementConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("integrationManagementConfigurer", IntegrationManagementConfiguration__TestContext001_BeanDefinitions.getIntegrationManagementConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationManagementConfiguration$EnableIntegrationManagementConfiguration", IntegrationAutoConfiguration__TestContext001_BeanDefinitions.IntegrationManagementConfiguration__BeanDefinitions.EnableIntegrationManagementConfiguration__BeanDefinitions.getEnableIntegrationManagementConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationManagementConfiguration", IntegrationAutoConfiguration__TestContext001_BeanDefinitions.IntegrationManagementConfiguration__BeanDefinitions.getIntegrationManagementConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationTaskSchedulerConfiguration", IntegrationAutoConfiguration__TestContext001_BeanDefinitions.IntegrationTaskSchedulerConfiguration__BeanDefinitions.getIntegrationTaskSchedulerConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("taskScheduler", IntegrationAutoConfiguration__TestContext001_BeanDefinitions.IntegrationTaskSchedulerConfiguration__BeanDefinitions.getTaskSchedulerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration$IntegrationConfiguration", IntegrationAutoConfiguration__TestContext001_BeanDefinitions.IntegrationConfiguration__BeanDefinitions.getIntegrationConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.integration.context.defaultPollerMetadata", IntegrationAutoConfiguration__TestContext001_BeanDefinitions.IntegrationConfiguration__BeanDefinitions.getDefaultPollerMetadataBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.integration.internalMessagingAnnotationPostProcessor", MessagingAnnotationPostProcessor__TestContext001_BeanDefinitions.getInternalMessagingAnnotationPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration", IntegrationAutoConfiguration__TestContext001_BeanDefinitions.getIntegrationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("integrationGlobalProperties", IntegrationAutoConfiguration__TestContext001_BeanDefinitions.getIntegrationGlobalPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("spring.jmx-org.springframework.boot.autoconfigure.jmx.JmxProperties", JmxProperties__TestContext001_BeanDefinitions.getJmxPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("spring.integration-org.springframework.boot.autoconfigure.integration.IntegrationProperties", IntegrationProperties__TestContext001_BeanDefinitions.getIntegrationPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.kafka.KafkaAnnotationDrivenConfiguration$EnableKafkaConfiguration", KafkaAnnotationDrivenConfiguration__TestContext001_BeanDefinitions.EnableKafkaConfiguration__BeanDefinitions.getEnableKafkaConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.kafka.config.internalKafkaListenerAnnotationProcessor", KafkaListenerAnnotationBeanPostProcessor__TestContext001_BeanDefinitions.getInternalKafkaListenerAnnotationProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.kafka.config.internalKafkaListenerEndpointRegistry", KafkaListenerEndpointRegistry__TestContext001_BeanDefinitions.getInternalKafkaListenerEndpointRegistryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.kafka.KafkaAnnotationDrivenConfiguration", KafkaAnnotationDrivenConfiguration__TestContext001_BeanDefinitions.getKafkaAnnotationDrivenConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaListenerContainerFactoryConfigurer", KafkaAnnotationDrivenConfiguration__TestContext001_BeanDefinitions.getKafkaListenerContainerFactoryConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaListenerContainerFactory", KafkaAnnotationDrivenConfiguration__TestContext001_BeanDefinitions.getKafkaListenerContainerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration", KafkaAutoConfiguration__TestContext001_BeanDefinitions.getKafkaAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaTemplate", KafkaAutoConfiguration__TestContext001_BeanDefinitions.getKafkaTemplateBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaProducerListener", KafkaAutoConfiguration__TestContext001_BeanDefinitions.getKafkaProducerListenerBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaConsumerFactory", KafkaAutoConfiguration__TestContext001_BeanDefinitions.getKafkaConsumerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaProducerFactory", KafkaAutoConfiguration__TestContext001_BeanDefinitions.getKafkaProducerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaAdmin", KafkaAutoConfiguration__TestContext001_BeanDefinitions.getKafkaAdminBeanDefinition());
    beanFactory.registerBeanDefinition("spring.kafka-org.springframework.boot.autoconfigure.kafka.KafkaProperties", KafkaProperties__TestContext001_BeanDefinitions.getKafkaPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.netty.NettyAutoConfiguration", NettyAutoConfiguration__TestContext001_BeanDefinitions.getNettyAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.netty-org.springframework.boot.autoconfigure.netty.NettyProperties", NettyProperties__TestContext001_BeanDefinitions.getNettyPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration", SqlInitializationAutoConfiguration__TestContext001_BeanDefinitions.getSqlInitializationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.sql.init-org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties", SqlInitializationProperties__TestContext001_BeanDefinitions.getSqlInitializationPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer$DependsOnDatabaseInitializationPostProcessor", DatabaseInitializationDependencyConfigurer__TestContext001_BeanDefinitions.DependsOnDatabaseInitializationPostProcessor__BeanDefinitions.getDependsOnDatabaseInitializationPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafWebMvcConfiguration$ThymeleafViewResolverConfiguration", ThymeleafAutoConfiguration__TestContext001_BeanDefinitions.ThymeleafWebMvcConfiguration__BeanDefinitions.ThymeleafViewResolverConfiguration__BeanDefinitions.getThymeleafViewResolverConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("thymeleafViewResolver", ThymeleafAutoConfiguration__TestContext001_BeanDefinitions.ThymeleafWebMvcConfiguration__BeanDefinitions.ThymeleafViewResolverConfiguration__BeanDefinitions.getThymeleafViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafWebMvcConfiguration", ThymeleafAutoConfiguration__TestContext001_BeanDefinitions.ThymeleafWebMvcConfiguration__BeanDefinitions.getThymeleafWebMvcConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration", ThymeleafAutoConfiguration__TestContext001_BeanDefinitions.DefaultTemplateResolverConfiguration__BeanDefinitions.getDefaultTemplateResolverConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("defaultTemplateResolver", ThymeleafAutoConfiguration__TestContext001_BeanDefinitions.DefaultTemplateResolverConfiguration__BeanDefinitions.getDefaultTemplateResolverBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.thymeleaf.TemplateEngineConfigurations$DefaultTemplateEngineConfiguration", TemplateEngineConfigurations__TestContext001_BeanDefinitions.DefaultTemplateEngineConfiguration__BeanDefinitions.getDefaultTemplateEngineConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("templateEngine", TemplateEngineConfigurations__TestContext001_BeanDefinitions.DefaultTemplateEngineConfiguration__BeanDefinitions.getTemplateEngineBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration", ThymeleafAutoConfiguration__TestContext001_BeanDefinitions.getThymeleafAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.thymeleaf-org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties", ThymeleafProperties__TestContext001_BeanDefinitions.getThymeleafPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration", TransactionAutoConfiguration__TestContext001_BeanDefinitions.getTransactionAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("platformTransactionManagerCustomizers", TransactionAutoConfiguration__TestContext001_BeanDefinitions.getPlatformTransactionManagerCustomizersBeanDefinition());
    beanFactory.registerBeanDefinition("spring.transaction-org.springframework.boot.autoconfigure.transaction.TransactionProperties", TransactionProperties__TestContext001_BeanDefinitions.getTransactionPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration", RestTemplateAutoConfiguration__TestContext001_BeanDefinitions.getRestTemplateAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("restTemplateBuilderConfigurer", RestTemplateAutoConfiguration__TestContext001_BeanDefinitions.getRestTemplateBuilderConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("restTemplateBuilder", RestTemplateAutoConfiguration__TestContext001_BeanDefinitions.getRestTemplateBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$NettyWebServerFactoryCustomizerConfiguration", EmbeddedWebServerFactoryCustomizerAutoConfiguration__TestContext001_BeanDefinitions.NettyWebServerFactoryCustomizerConfiguration__BeanDefinitions.getNettyWebServerFactoryCustomizerConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("nettyWebServerFactoryCustomizer", EmbeddedWebServerFactoryCustomizerAutoConfiguration__TestContext001_BeanDefinitions.NettyWebServerFactoryCustomizerConfiguration__BeanDefinitions.getNettyWebServerFactoryCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration", EmbeddedWebServerFactoryCustomizerAutoConfiguration__TestContext001_BeanDefinitions.TomcatWebServerFactoryCustomizerConfiguration__BeanDefinitions.getTomcatWebServerFactoryCustomizerConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("tomcatWebServerFactoryCustomizer", EmbeddedWebServerFactoryCustomizerAutoConfiguration__TestContext001_BeanDefinitions.TomcatWebServerFactoryCustomizerConfiguration__BeanDefinitions.getTomcatWebServerFactoryCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration", EmbeddedWebServerFactoryCustomizerAutoConfiguration__TestContext001_BeanDefinitions.getEmbeddedWebServerFactoryCustomizerAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorConfiguration$ReactorNetty", ClientHttpConnectorConfiguration__TestContext001_BeanDefinitions.ReactorNetty__BeanDefinitions.getReactorNettyBeanDefinition());
    beanFactory.registerBeanDefinition("reactorClientResourceFactory", ClientHttpConnectorConfiguration__TestContext001_BeanDefinitions.ReactorNetty__BeanDefinitions.getReactorClientResourceFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("reactorClientHttpConnector", ClientHttpConnectorConfiguration__TestContext001_BeanDefinitions.ReactorNetty__BeanDefinitions.getReactorClientHttpConnectorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration", ClientHttpConnectorAutoConfiguration__TestContext001_BeanDefinitions.getClientHttpConnectorAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("clientConnectorCustomizer", ClientHttpConnectorAutoConfiguration__TestContext001_BeanDefinitions.getClientConnectorCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration$WebClientCodecsConfiguration", WebClientAutoConfiguration__TestContext001_BeanDefinitions.WebClientCodecsConfiguration__BeanDefinitions.getWebClientCodecsConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("exchangeStrategiesCustomizer", WebClientAutoConfiguration__TestContext001_BeanDefinitions.WebClientCodecsConfiguration__BeanDefinitions.getExchangeStrategiesCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration", WebClientAutoConfiguration__TestContext001_BeanDefinitions.getWebClientAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("webClientBuilder", WebClientAutoConfiguration__TestContext001_BeanDefinitions.getWebClientBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration", HttpEncodingAutoConfiguration__TestContext001_BeanDefinitions.getHttpEncodingAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("characterEncodingFilter", HttpEncodingAutoConfiguration__TestContext001_BeanDefinitions.getCharacterEncodingFilterBeanDefinition());
    beanFactory.registerBeanDefinition("localeCharsetMappingsCustomizer", HttpEncodingAutoConfiguration__TestContext001_BeanDefinitions.getLocaleCharsetMappingsCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration", MultipartAutoConfiguration__TestContext001_BeanDefinitions.getMultipartAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("multipartConfigElement", MultipartAutoConfiguration__TestContext001_BeanDefinitions.getMultipartConfigElementBeanDefinition());
    beanFactory.registerBeanDefinition("multipartResolver", MultipartAutoConfiguration__TestContext001_BeanDefinitions.getMultipartResolverBeanDefinition());
    beanFactory.registerBeanDefinition("spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties", MultipartProperties__TestContext001_BeanDefinitions.getMultipartPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.cloud.function.cloudevent.CloudEventsFunctionExtensionConfiguration", CloudEventsFunctionExtensionConfiguration__TestContext001_BeanDefinitions.getCloudEventsFunctionExtensionConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("nativeFunctionInvocationHelper", CloudEventsFunctionExtensionConfiguration__TestContext001_BeanDefinitions.getNativeFunctionInvocationHelperBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.cloud.function.context.config.ContextFunctionCatalogAutoConfiguration$JsonMapperConfiguration", ContextFunctionCatalogAutoConfiguration__TestContext001_BeanDefinitions.JsonMapperConfiguration__BeanDefinitions.getJsonMapperConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jsonMapper", ContextFunctionCatalogAutoConfiguration__TestContext001_BeanDefinitions.JsonMapperConfiguration__BeanDefinitions.getJsonMapperBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.cloud.function.context.config.ContextFunctionCatalogAutoConfiguration$PlainFunctionScanConfiguration", ContextFunctionCatalogAutoConfiguration__TestContext001_BeanDefinitions.PlainFunctionScanConfiguration__BeanDefinitions.getPlainFunctionScanConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.cloud.function.context.config.ContextFunctionCatalogAutoConfiguration", ContextFunctionCatalogAutoConfiguration__TestContext001_BeanDefinitions.getContextFunctionCatalogAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("functionCatalog", ContextFunctionCatalogAutoConfiguration__TestContext001_BeanDefinitions.getFunctionCatalogBeanDefinition());
    beanFactory.registerBeanDefinition("functionRouter", ContextFunctionCatalogAutoConfiguration__TestContext001_BeanDefinitions.getFunctionRouterBeanDefinition());
    beanFactory.registerBeanDefinition("spring.cloud.function-org.springframework.cloud.function.context.FunctionProperties", FunctionProperties__TestContext001_BeanDefinitions.getFunctionPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.cloud.function.context.config.KotlinLambdaToFunctionAutoConfiguration", KotlinLambdaToFunctionAutoConfiguration__TestContext001_BeanDefinitions.getKotlinLambdaToFunctionAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.cloud.stream.binder.kafka.config.ExtendedBindingHandlerMappingsProviderConfiguration", ExtendedBindingHandlerMappingsProviderConfiguration__TestContext001_BeanDefinitions.getExtendedBindingHandlerMappingsProviderConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaExtendedPropertiesDefaultMappingsProvider", ExtendedBindingHandlerMappingsProviderConfiguration__TestContext001_BeanDefinitions.getKafkaExtendedPropertiesDefaultMappingsProviderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.cloud.stream.binder.kafka.streams.ExtendedBindingHandlerMappingsProviderAutoConfiguration", ExtendedBindingHandlerMappingsProviderAutoConfiguration__TestContext001_BeanDefinitions.getExtendedBindingHandlerMappingsProviderAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaStreamsExtendedPropertiesDefaultMappingsProvider", ExtendedBindingHandlerMappingsProviderAutoConfiguration__TestContext001_BeanDefinitions.getKafkaStreamsExtendedPropertiesDefaultMappingsProviderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.cloud.stream.config.ContentTypeConfiguration", ContentTypeConfiguration__TestContext001_BeanDefinitions.getContentTypeConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("integrationArgumentResolverMessageConverter", ContentTypeConfiguration__TestContext001_BeanDefinitions.getIntegrationArgumentResolverMessageConverterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.cloud.stream.config.BinderFactoryAutoConfiguration", BinderFactoryAutoConfiguration__TestContext001_BeanDefinitions.getBinderFactoryAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("integrationMessageHandlerMethodFactory", BinderFactoryAutoConfiguration__TestContext001_BeanDefinitions.getIntegrationMessageHandlerMethodFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("binderTypeRegistry", BinderFactoryAutoConfiguration__TestContext001_BeanDefinitions.getBinderTypeRegistryBeanDefinition());
    beanFactory.registerBeanDefinition("messageConverterConfigurer", BinderFactoryAutoConfiguration__TestContext001_BeanDefinitions.getMessageConverterConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("channelFactory", BinderFactoryAutoConfiguration__TestContext001_BeanDefinitions.getChannelFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("fluxMessageChannelBindingTargetFactory", BinderFactoryAutoConfiguration__TestContext001_BeanDefinitions.getFluxMessageChannelBindingTargetFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("messageSourceFactory", BinderFactoryAutoConfiguration__TestContext001_BeanDefinitions.getMessageSourceFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("compositeMessageChannelConfigurer", BinderFactoryAutoConfiguration__TestContext001_BeanDefinitions.getCompositeMessageChannelConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("spring.cloud.stream-org.springframework.cloud.stream.config.BindingServiceProperties", BindingServiceProperties__TestContext001_BeanDefinitions.getBindingServicePropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.cloud.stream.function.FunctionConfiguration", FunctionConfiguration__TestContext001_BeanDefinitions.getFunctionConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("streamBridgeUtils", FunctionConfiguration__TestContext001_BeanDefinitions.getStreamBridgeUtilsBeanDefinition());
    beanFactory.registerBeanDefinition("functionBindingRegistrar", FunctionConfiguration__TestContext001_BeanDefinitions.getFunctionBindingRegistrarBeanDefinition());
    beanFactory.registerBeanDefinition("po", FunctionConfiguration__TestContext001_BeanDefinitions.getPoBeanDefinition());
    beanFactory.registerBeanDefinition("functionInitializer", FunctionConfiguration__TestContext001_BeanDefinitions.getFunctionInitializerBeanDefinition());
    beanFactory.registerBeanDefinition("supplierInitializer", FunctionConfiguration__TestContext001_BeanDefinitions.getSupplierInitializerBeanDefinition());
    beanFactory.registerBeanDefinition("spring.cloud.stream.function-org.springframework.cloud.stream.function.StreamFunctionProperties", StreamFunctionProperties__TestContext001_BeanDefinitions.getStreamFunctionPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.cloud.stream.config.SpelExpressionConverterConfiguration", SpelExpressionConverterConfiguration__TestContext001_BeanDefinitions.getSpelExpressionConverterConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spelPropertyAccessorRegistrar", SpelExpressionConverterConfiguration__TestContext001_BeanDefinitions.getSpelPropertyAccessorRegistrarBeanDefinition());
    beanFactory.registerBeanDefinition("spelConverter", SpelExpressionConverterConfiguration__TestContext001_BeanDefinitions.getSpelConverterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.cloud.stream.config.BindingServiceConfiguration", BindingServiceConfiguration__TestContext001_BeanDefinitions.getBindingServiceConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("globalErrorChannelCustomizer", BindingServiceConfiguration__TestContext001_BeanDefinitions.getGlobalErrorChannelCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("BindingHandlerAdvise", BindingServiceConfiguration__TestContext001_BeanDefinitions.getBindingHandlerAdviseBeanDefinition());
    beanFactory.registerBeanDefinition("binderFactory", BindingServiceConfiguration__TestContext001_BeanDefinitions.getBinderFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("binderChildContextInitializer", BindingServiceConfiguration__TestContext001_BeanDefinitions.getBinderChildContextInitializerBeanDefinition());
    beanFactory.registerBeanDefinition("bindingService", BindingServiceConfiguration__TestContext001_BeanDefinitions.getBindingServiceBeanDefinition());
    beanFactory.registerBeanDefinition("outputBindingLifecycle", BindingServiceConfiguration__TestContext001_BeanDefinitions.getOutputBindingLifecycleBeanDefinition());
    beanFactory.registerBeanDefinition("inputBindingLifecycle", BindingServiceConfiguration__TestContext001_BeanDefinitions.getInputBindingLifecycleBeanDefinition());
    beanFactory.registerBeanDefinition("bindingsLifecycleController", BindingServiceConfiguration__TestContext001_BeanDefinitions.getBindingsLifecycleControllerBeanDefinition());
    beanFactory.registerBeanDefinition("contextStartAfterRefreshListener", BindingServiceConfiguration__TestContext001_BeanDefinitions.getContextStartAfterRefreshListenerBeanDefinition());
    beanFactory.registerBeanDefinition("dynamicDestinationsBindable", BindingServiceConfiguration__TestContext001_BeanDefinitions.getDynamicDestinationsBindableBeanDefinition());
    beanFactory.registerBeanDefinition("appListener", BindingServiceConfiguration__TestContext001_BeanDefinitions.getAppListenerBeanDefinition());
    beanFactory.registerBeanDefinition("spring.cloud.stream.integration-org.springframework.cloud.stream.config.SpringIntegrationProperties", SpringIntegrationProperties__TestContext001_BeanDefinitions.getSpringIntegrationPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.cloud.stream.binder.kafka.streams.KafkaStreamsBinderSupportAutoConfiguration", KafkaStreamsBinderSupportAutoConfiguration__TestContext001_BeanDefinitions.getKafkaStreamsBinderSupportAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("binderConfigurationProperties", KafkaStreamsBinderSupportAutoConfiguration__TestContext001_BeanDefinitions.getBinderConfigurationPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaStreamsConfiguration", KafkaStreamsBinderSupportAutoConfiguration__TestContext001_BeanDefinitions.getKafkaStreamsConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("streamConfigGlobalProperties", KafkaStreamsBinderSupportAutoConfiguration__TestContext001_BeanDefinitions.getStreamConfigGlobalPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("messageConversionDelegate", KafkaStreamsBinderSupportAutoConfiguration__TestContext001_BeanDefinitions.getMessageConversionDelegateBeanDefinition());
    beanFactory.registerBeanDefinition("kStreamBoundElementFactory", KafkaStreamsBinderSupportAutoConfiguration__TestContext001_BeanDefinitions.getKStreamBoundElementFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("kTableBoundElementFactory", KafkaStreamsBinderSupportAutoConfiguration__TestContext001_BeanDefinitions.getKTableBoundElementFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("globalKTableBoundElementFactory", KafkaStreamsBinderSupportAutoConfiguration__TestContext001_BeanDefinitions.getGlobalKTableBoundElementFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("sendToDlqAndContinue", KafkaStreamsBinderSupportAutoConfiguration__TestContext001_BeanDefinitions.getSendToDlqAndContinueBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaStreamsBindingInformationCatalogue", KafkaStreamsBinderSupportAutoConfiguration__TestContext001_BeanDefinitions.getKafkaStreamsBindingInformationCatalogueBeanDefinition());
    beanFactory.registerBeanDefinition("keyValueSerdeResolver", KafkaStreamsBinderSupportAutoConfiguration__TestContext001_BeanDefinitions.getKeyValueSerdeResolverBeanDefinition());
    beanFactory.registerBeanDefinition("interactiveQueryServices", KafkaStreamsBinderSupportAutoConfiguration__TestContext001_BeanDefinitions.getInteractiveQueryServicesBeanDefinition());
    beanFactory.registerBeanDefinition("kafkaStreamsRegistry", KafkaStreamsBinderSupportAutoConfiguration__TestContext001_BeanDefinitions.getKafkaStreamsRegistryBeanDefinition());
    beanFactory.registerBeanDefinition("streamsBuilderFactoryManager", KafkaStreamsBinderSupportAutoConfiguration__TestContext001_BeanDefinitions.getStreamsBuilderFactoryManagerBeanDefinition());
    beanFactory.registerBeanDefinition("encodingDecodingBindAdviceHandler", KafkaStreamsBinderSupportAutoConfiguration__TestContext001_BeanDefinitions.getEncodingDecodingBindAdviceHandlerBeanDefinition());
    beanFactory.registerBeanDefinition("spring.cloud.stream.kafka.streams-org.springframework.cloud.stream.binder.kafka.streams.properties.KafkaStreamsExtendedBindingProperties", KafkaStreamsExtendedBindingProperties__TestContext001_BeanDefinitions.getKafkaStreamsExtendedBindingPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.cloud.stream.binder.kafka.streams.function.KafkaStreamsFunctionAutoConfiguration", KafkaStreamsFunctionAutoConfiguration__TestContext001_BeanDefinitions.getKafkaStreamsFunctionAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("integrationChannelResolver", BeanFactoryChannelResolver__TestContext001_BeanDefinitions.getIntegrationChannelResolverBeanDefinition());
    beanFactory.registerBeanDefinition("integrationMessagePublishingErrorHandler", MessagePublishingErrorHandler__TestContext001_BeanDefinitions.getIntegrationMessagePublishingErrorHandlerBeanDefinition());
    beanFactory.registerBeanDefinition("nullChannel", NullChannel__TestContext001_BeanDefinitions.getNullChannelBeanDefinition());
    beanFactory.registerBeanDefinition("errorChannel", PublishSubscribeChannel__TestContext001_BeanDefinitions.getErrorChannelBeanDefinition());
    beanFactory.registerBeanDefinition("_org.springframework.integration.errorLogger.handler", LoggingHandler__TestContext001_BeanDefinitions.getHandlerBeanDefinition());
    beanFactory.registerBeanDefinition("_org.springframework.integration.errorLogger", AbstractEndpoint__TestContext001_BeanDefinitions.getErrorLoggerBeanDefinition());
    beanFactory.registerBeanDefinition("integrationEvaluationContext", StandardEvaluationContext__TestContext001_BeanDefinitions.getIntegrationEvaluationContextBeanDefinition());
    beanFactory.registerBeanDefinition("integrationSimpleEvaluationContext", SimpleEvaluationContext__TestContext001_BeanDefinitions.getIntegrationSimpleEvaluationContextBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.integration.config.IdGeneratorConfigurer#0", IdGeneratorConfigurer__TestContext001_BeanDefinitions.getIdGeneratorConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("jsonPath", getJsonPathBeanDefinition());
    beanFactory.registerBeanDefinition("integrationLifecycleRoleController", SmartLifecycleRoleController__TestContext001_BeanDefinitions.getIntegrationLifecycleRoleControllerBeanDefinition());
    beanFactory.registerBeanDefinition("messageBuilderFactory", DefaultMessageBuilderFactory__TestContext001_BeanDefinitions.getMessageBuilderFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("integrationHeaderChannelRegistry", DefaultHeaderChannelRegistry__TestContext001_BeanDefinitions.getIntegrationHeaderChannelRegistryBeanDefinition());
    beanFactory.registerBeanDefinition("globalChannelInterceptorProcessor", GlobalChannelInterceptorProcessor__TestContext001_BeanDefinitions.getGlobalChannelInterceptorProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("datatypeChannelMessageConverter", DefaultDatatypeChannelMessageConverter__TestContext001_BeanDefinitions.getDatatypeChannelMessageConverterBeanDefinition());
    beanFactory.registerBeanDefinition("integrationListMessageHandlerMethodFactory", IntegrationMessageHandlerMethodFactory__TestContext001_BeanDefinitions.getIntegrationListMessageHandlerMethodFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.integration.config.ConverterRegistrar$IntegrationConverterRegistration#0", ConverterRegistrar__TestContext001_BeanDefinitions.IntegrationConverterRegistration__BeanDefinitions.getIntegrationConverterRegistrationBeanDefinition());
    beanFactory.registerBeanDefinition("converterRegistrar", ConverterRegistrar__TestContext001_BeanDefinitions.getConverterRegistrarBeanDefinition());
    beanFactory.registerBeanDefinition("integrationConversionService", CustomConversionServiceFactoryBean__TestContext001_BeanDefinitions.getIntegrationConversionServiceBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.integration.dsl.context.IntegrationFlowBeanPostProcessor", IntegrationFlowBeanPostProcessor__TestContext001_BeanDefinitions.getIntegrationFlowBeanPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.integration.dsl.context.IntegrationFlowContext", StandardIntegrationFlowContext__TestContext001_BeanDefinitions.getIntegrationFlowContextBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.integration.dsl.BaseIntegrationFlowDefinition$ReplyProducerCleaner", BaseIntegrationFlowDefinition__TestContext001_BeanDefinitions.ReplyProducerCleaner__BeanDefinitions.getReplyProducerCleanerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.aop.config.internalAutoProxyCreator", InfrastructureAdvisorAutoProxyCreator__TestContext001_BeanDefinitions.getInternalAutoProxyCreatorBeanDefinition());
  }

  /**
   * Register the aliases.
   */
  public void registerAliases(DefaultListableBeanFactory beanFactory) {
    beanFactory.registerAlias("applicationTaskExecutor", "taskExecutor");
  }
}
